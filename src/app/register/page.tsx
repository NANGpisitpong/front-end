"use client";
import React, { useState, useEffect, FormEvent, useRef } from 'react';
import { useRouter } from 'next/navigation';
import './res.css';

type Particle = {
  x: number;
  y: number;
  element: HTMLDivElement;
};

const ParticleFollowMouse: React.FC = () => {
  const containerRef = useRef<HTMLDivElement>(null);
  const pointer = useRef({ x: window.innerWidth / 2, y: window.innerHeight / 2 });
  const particles = useRef<Particle[]>([]);

  const NUM_PARTICLES = 20;

  useEffect(() => {
    const container = containerRef.current;
    if (!container) return;

    for (let i = 0; i < NUM_PARTICLES; i++) {
      const el = document.createElement('div');
      el.className = 'particle';
      el.style.position = 'absolute';
      el.style.width = '10px';
      el.style.height = '10px';
      el.style.borderRadius = '50%';
      el.style.background = `hsl(${(i * 30) % 360}, 100%, 60%)`;
      el.style.pointerEvents = 'none';
      container.appendChild(el);
      particles.current.push({ x: pointer.current.x, y: pointer.current.y, element: el });
    }

    const onMouseMove = (e: MouseEvent) => {
      pointer.current.x = e.clientX;
      pointer.current.y = e.clientY;
    };
    window.addEventListener('mousemove', onMouseMove);

    const animate = () => {
      for (let i = 0; i < NUM_PARTICLES; i++) {
        const p = particles.current[i];
        const targetX = i === 0 ? pointer.current.x : particles.current[i - 1].x;
        const targetY = i === 0 ? pointer.current.y : particles.current[i - 1].y;

        const dx = targetX - p.x;
        const dy = targetY - p.y;
        const angle = Math.atan2(dy, dx);

        p.x += Math.cos(angle) * 5;
        p.y += Math.sin(angle) * 5;

        p.element.style.transform = `translate(${p.x}px, ${p.y}px)`;
      }
      requestAnimationFrame(animate);
    };

    animate();

    return () => {
      window.removeEventListener('mousemove', onMouseMove);
      particles.current.forEach(p => p.element.remove());
      particles.current = [];
    };
  }, []);

  return (
    <div
      ref={containerRef}
      style={{
        position: 'fixed',
        top: 0, left: 0,
        width: '100%',
        height: '100%',
        pointerEvents: 'none',
        zIndex: 9999,
      }}
    />
  );
};

const Register: React.FC = () => {
  const router = useRouter();

  const [formData, setFormData] = useState({
    username: '',
    password: '',
    confirmPassword: '',
    prefix: '',
    firstName: '',
    lastName: '',
    address: '',
    gender: '',
    birthYear: '',
    birthMonth: '',
    birthDay: '',
    acceptedTerms: false,
  });

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
  ) => {
    const { name, value, type } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? (e.target as HTMLInputElement).checked : value,
    }));
  };

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!formData.acceptedTerms) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å');
      return;
    }
    if (formData.password !== formData.confirmPassword) {
      alert('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô');
      return;
    }
    // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• formData ‡πÑ‡∏õ backend ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    console.log('‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢:', formData);
    router.push('/login');
  };

  return (
    <>
      <ParticleFollowMouse />

      <div className="register-wrapper">
        <div className="register-card">
          <div className="register-header">
            <a href="/login" className="back-btn">‚óÄ ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö</a>
            <h2>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2>
            <p className="subtitle">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡∏£‡∏î Forex/‡∏´‡∏∏‡πâ‡∏ô ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏™‡πÑ‡∏ï‡∏•‡πå</p>
          </div>

          <form onSubmit={handleSubmit} className="register-form">
            <div className="form-section">
              <h3>‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâü§µüìä</h3>
              <label>‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πå</label>
              <input
                type="text"
                name="username"
                value={formData.username}
                onChange={handleChange}
                required
                placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πå"
              />

              <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
              <input
                type="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                required
                placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              />

              <label>‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö)</label>
              <input
                type="password"
                name="confirmPassword"
                value={formData.confirmPassword}
                onChange={handleChange}
                required
                placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              />
            </div>

            <div className="form-section">
              <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ßüìù</h3>

              <label>‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠</label>
              <select
                name="prefix"
                value={formData.prefix}
                onChange={handleChange}
                required
              >
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å --</option>
                <option value="mr">‡∏ô‡∏≤‡∏¢</option>
                <option value="mrs">‡∏ô‡∏≤‡∏á</option>
                <option value="miss">‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß</option>
              </select>

              <label>‡∏ä‡∏∑‡πà‡∏≠(‡∏à‡∏£‡∏¥‡∏á)</label>
              <input
                type="text"
                name="firstName"
                value={formData.firstName}
                onChange={handleChange}
                required
                placeholder="‡∏ä‡∏∑‡πà‡∏≠"
              />

              <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•(‡∏à‡∏£‡∏¥‡∏á)</label>
              <input
                type="text"
                name="lastName"
                value={formData.lastName}
                onChange={handleChange}
                required
                placeholder="‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
              />

              <label>‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î</label>
              <div className="birthdate-select">
                <select
                  name="birthDay"
                  value={formData.birthDay}
                  onChange={handleChange}
                  required
                >
                  <option value="">‡∏ß‡∏±‡∏ô</option>
                  {Array.from({ length: 31 }, (_, i) => (
                    <option key={i + 1} value={i + 1}>{i + 1}</option>
                  ))}
                </select>

                <select
                  name="birthMonth"
                  value={formData.birthMonth}
                  onChange={handleChange}
                  required
                >
                  <option value="">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</option>
                  {[
                    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
                    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
                  ].map((month, i) => (
                    <option key={i + 1} value={i + 1}>{month}</option>
                  ))}
                </select>

                <select
                  name="birthYear"
                  value={formData.birthYear}
                  onChange={handleChange}
                  required
                >
                  <option value="">‡∏õ‡∏µ</option>
                  {Array.from({ length: 100 }, (_, i) => {
                    const year = new Date().getFullYear() - i;
                    return <option key={year} value={year}>{year}</option>;
                  })}
                </select>
              </div>

              <label>‡πÄ‡∏û‡∏®üë©üßë</label>
              <div className="radio-group">
                <label>
                  <input
                    type="radio"
                    name="gender"
                    value="male"
                    checked={formData.gender === 'male'}
                    onChange={handleChange}
                    required
                  />
                  ‡∏ä‡∏≤‡∏¢
                </label>
                <label>
                  <input
                    type="radio"
                    name="gender"
                    value="female"
                    checked={formData.gender === 'female'}
                    onChange={handleChange}
                  />
                  ‡∏´‡∏ç‡∏¥‡∏á
                </label>
                <label>
                  <input
                    type="radio"
                    name="gender"
                    value="other"
                    checked={formData.gender === 'other'}
                    onChange={handleChange}
                  />
                  ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                </label>
              </div>

              <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</label>
              <textarea
                name="address"
                value={formData.address}
                onChange={handleChange}
                rows={3}
                required
                className="address-textarea"
                placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà"
              />
            </div>

            <div className="checkbox-inline">
              <input
                type="checkbox"
                id="acceptedTerms"
                name="acceptedTerms"
                checked={formData.acceptedTerms}
                onChange={handleChange}
                required
              />
              <label htmlFor="acceptedTerms">‡∏â‡∏±‡∏ô‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</label>
            </div>

            <button type="submit" className="btn-register">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</button>
          </form>
        </div>
      </div>
    </>
  );
};

export default Register;
